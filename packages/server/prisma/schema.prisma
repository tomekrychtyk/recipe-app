generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Used for migrations/db push
}

model User {
  id         String   @id @db.Uuid
  email      String   @unique
  role       Role     @default(user)
  created_at DateTime @default(now()) @db.Timestamptz
  meals      Meal[]
  diaryEntries FoodDiaryEntry[]

  @@map("users")
}

enum Role {
  admin
  user
}

model Ingredient {
  id          Int      @id @default(autoincrement())
  name        String
  categoryId  String
  proteins    Float
  carbs       Float
  fats        Float
  calories    Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Vitamins
  vitaminA        Float?  // mcg
  vitaminD        Float?  // mcg
  vitaminE        Float?  // mg
  vitaminK        Float?  // mcg
  vitaminC        Float?  // mg
  thiamin         Float?  // mg
  riboflavin      Float?  // mg
  niacin          Float?  // mg
  pantothenicAcid Float?  // mg
  vitaminB6       Float?  // mg
  biotin          Float?  // mcg
  folate          Float?  // mcg
  vitaminB12      Float?  // mcg

  // Minerals
  calcium     Float?  // mg
  iron        Float?  // mg
  magnesium   Float?  // mg
  phosphorus  Float?  // mg
  potassium   Float?  // mg
  sodium      Float?  // mg
  zinc        Float?  // mg
  copper      Float?  // mg
  manganese   Float?  // mg
  selenium    Float?  // mcg
  chromium    Float?  // mcg
  molybdenum  Float?  // mcg
  iodine      Float?  // mcg

  meals                MealIngredient[]
  foodDiaryIngredients FoodDiaryIngredient[]
}

model Meal {
  id          Int              @id @default(autoincrement())
  name        String
  categoryId  String
  description String?
  ingredients MealIngredient[]
  diaryEntries  FoodDiaryEntry[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String?          @db.Uuid
  user        User?            @relation(fields: [userId], references: [id])
}

model MealIngredient {
  id           Int        @id @default(autoincrement())
  mealId       Int
  ingredientId Int
  amount       Float      
  meal         Meal       @relation(fields: [mealId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model FoodDiaryEntry {
  id          Int                   @id @default(autoincrement())
  userId      String                @db.Uuid
  date        DateTime              @db.Date
  time        DateTime              @db.Time
  name        String
  mealId      Int?
  meal        Meal?                 @relation(fields: [mealId], references: [id])
  ingredients FoodDiaryIngredient[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  user        User                  @relation(fields: [userId], references: [id])

  @@map("food_diary_entries")
}

model FoodDiaryIngredient {
  id        Int             @id @default(autoincrement())
  entryId   Int
  entry     FoodDiaryEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  ingredientId Int
  ingredient   Ingredient     @relation(fields: [ingredientId], references: [id])
  amount       Float

  @@map("food_diary_ingredients")
}
